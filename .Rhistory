SD = sd(Ovary.Area..mm.))
View(Data)
summarize(Data, Minimum = min(Flower.Number, na.rm=TRUE), Maximum = max(Flower.Number, na.rm=TRUE),
Mean = mean(Flower.Number, na.rm=TRUE), Median = median(Flower.Number, na.rm=TRUE),
SD = sd(Flower.Number, na.rm=TRUE))
Data %>%
group_by(Population.Type %>%
summarize( Mean = mean(Ovary.Area..mm.))
Data %>%
group_by(Population.Type)%>%
summarize( Mean = mean(Ovary.Area..mm.))
Grp<- group_by(Population.Type)
summarize(Grp,Mean = mean(Ovary.Area..mm.))
Grp<- group_by(Data, Population.Type)
summarize(Grp,Mean = mean(Ovary.Area..mm.))
Grp<- group_by(Data, Population.Type,)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature...C.))
Grp<- group_by(Data, Population.Type,)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature...C.))
Grp<- group_by(Data, Population.Type,)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature...C.))
Grp<- group_by(Data, Population.Type,)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE))
Grp<- group_by(Data, Population.Type)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE))
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean= mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature))
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean= mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature...C.))
library(dplyr)
getwd()
getwd()
Data<-read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
library(dplyr)
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
Data<-read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
class(Data)
dim(Data)
class(Data)
dim(Data)
str(Data)
head(Data)
tail(Data)
NewData<-rename(Data,Ovary.Width..mm.= Ovary_Width, Ovary.Height..mm. = Ovary_Height, Flower.Number = Flower_Num,
Average.August.Temperature...C. = Aver_T )
NewData<-rename(Data, Ovary.Width..mm.= Ovary_Width, Ovary.Height..mm. = Ovary_Height, Flower.Number = Flower_Num,
Average.August.Temperature...C. = Aver_T )
NewData<-rename(Data, Ovary.Width..mm.= Ovary_Width)
Data<-read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
NewData<-rename(Data, Ovary.Width..mm.= Ovary_Width)
View(Data)
NewData<-rename(Data, Ovary_Width = Ovary.Width..mm.)
NewData
Data<-mutate(Data, Ovary_Area = Ovary.Width..mm. * Ovary.Height..mm.)
head(Data)
summarize(Data, Minimum = min(Ovary_Area), Maximum = max(Ovary_Area),
Mean = mean(Ovary_Area), Median = median(Ovary_Area),
SD = sd(Ovary_Area))
summarize(Data, Minimum = min(Flower.Number, na.rm=TRUE), Maximum = max(Flower.Number, na.rm=TRUE),
Mean = mean(Flower.Number, na.rm=TRUE), Median = median(Flower.Number, na.rm=TRUE),
SD = sd(Flower.Number, na.rm=TRUE))
library(dplyr)
library(dplyr)
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
library(dplyr)
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
Grp<- group_by(Data, Population.Type)
summarize(Grp,OA_Mean = mean(Ovary_Area), FN_Mean= mean(Flower.Number, na.rm=TRUE),
AT_Mean = mean(Average.August.Temperature...C.))
NewData %%
group_by(NewData, Population.Type) %%
summarize(Grp,OA_Mean = mean(Ovary_Area), FN_Mean= mean(Flower.Number, na.rm=TRUE),
AT_Mean = mean(Average.August.Temperature...C.))
NewData %>%
group_by(NewData, Population.Type) %>%
summarize(Grp,OA_Mean = mean(Ovary_Area), FN_Mean= mean(Flower.Number, na.rm=TRUE),
AT_Mean = mean(Average.August.Temperature...C.))
NewData %>%
group_by(NewData, Population.Type) %>%
summarize(OA_Mean = mean(Ovary_Area), FN_Mean= mean(Flower.Number, na.rm=TRUE),
AT_Mean = mean(Average.August.Temperature...C.))
NewData<-mutate(Data, Ovary_Area = Ovary.Width..mm. * Ovary.Height..mm.)
head(NewData)
summarize(NewData, Minimum = min(Ovary_Area), Maximum = max(Ovary_Area), Mean = mean(Ovary_Area), Median = median(Ovary_Area), SD = sd(Ovary_Area))
?abs
library(ggplot2)
MyData <- read.csv("~/Desktop/intro tutorial/week 2 / FallopiaData.csv")
MyData <- read.csv("~/Desktop/intro tutorial/week 2/ FallopiaData.csv")
MyData <- read.csv("/~/Desktop/intro tutorial/week 2/ FallopiaData.csv")
MyData <- read.csv("/Desktop/intro tutorial/week 2/ FallopiaData.csv")
MyData <- read.csv("Desktop/intro tutorial/week 2/ FallopiaData.csv")
getwd()
rnorm(10)
runif(10)
sample(c(1:5),100, replace = T)
library(ggplot2)
rnorm(10)
runif(10)
qplot(sample(c(1:5),100, replace = T))
library(ggplot2)
rnorm(10)
runif(10)
qplot(sample(c(1:5),100, replace = T))
library(ggplot2)
rnorm(10)
runif(10)
qplot(sample(c(1:5),100, replace = T))
install.packages("tidyverse")
install.packages("devtools")
abs(-10)
1==2
knitr::opts_chunk$set(echo = TRUE)
MyData<-read.csv("./InputData/FallopiaData.csv")#loading the data
str(MyData)#check the structure of the Data
head(MyData)
class(MyData)
dim(MyData)
tail(MyData)
summary(MyData)
NewData %>% group_by(Nutrients) %>%
summarise(Average = my_function(TotalG, "Average"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)#package loading
MyData<-read.csv("./InputData/FallopiaData.csv")#loading the data
str(MyData)#check the structure of the Data
head(MyData)
class(MyData)
dim(MyData)
tail(MyData)
summary(MyData)
MyData %>%
filter(Total >= 60)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
NewData <- transmute(SubData,TotalG = Total / 1000, Taxon, Scenario, Nutrients)
head(NewData)
my_function <- function(vec1, str1){
if (str1 == "Average"){
Average <- mean(vec1)
return(Average)
}else if (str1 == "Sum"){
Sum <- sum(vec1)
return(Sum)
}else if (str1 == "Observation"){
Count <- length(vec1)
return (Count)
}else {
cat("error")
}
}
cat("The total number of observations is", my_function(NewData$Taxon,"Observation"))
NewData %>% group_by(Nutrients) %>%
summarise(Average = my_function(TotalG, "Average"))
View(MyData)
MyData %>%
filter(Total >= 60)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
MyData %>%
filter(Total >= 60)
head(MyData)
MyData %>%
filter(Total >= 60)%>%
select(Total, Taxon, Scenario, Nutrients)
head(MyData)
MyData <- MyData %>%
filter(Total >= 60)%>%
select(Total, Taxon, Scenario, Nutrients)
MyData <- MyData %>%
filter(Total >= 60)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
NewData <- transmute(SubData,TotalG = Total / 1000, Taxon, Scenario, Nutrients)
head(NewData)
my_function <- function(vec1, str1){
if (str1 == "Average"){
Average <- mean(vec1)
return(Average)
}else if (str1 == "Sum"){
Sum <- sum(vec1)
return(Sum)
}else if (str1 == "Observation"){
Count <- length(vec1)
return (Count)
}else {
cat("error")
}
}
my_function <- function(vec1, str1){
if (str1 == "Average"){
Average <- mean(vec1)
return(Average)
}else if (str1 == "Sum"){
Sum <- sum(vec1)
return(Sum)
}else if (str1 == "Observation"){
Count <- length(vec1)
return (Count)
}else {
cat("Error! You can choose from Average/Sum/Observation.")
}
}
write.csv(NewData, "Output/WrangledData.csv", row.names = FALSE)
cat("The total number of observations is", my_function(NewData$Taxon,"Observation"))
NewData %>% group_by(Nutrients) %>%
summarise(Average_TotalG = my_function(TotalG, "Average"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)#package loading
MyData<-read.csv("./InputData/FallopiaData.csv")#loading the data
str(MyData)#check the structure of the Data
head(MyData)
class(MyData)
dim(MyData)
tail(MyData)
summary(MyData)
MyData <- MyData %>%
filter(Total >= 60)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
NewData <- transmute(SubData,TotalG = Total / 1000, Taxon, Scenario, Nutrients)
head(NewData)
my_function <- function(vec1, str1){
if (str1 == "Average"){
Average <- mean(vec1)
return(Average)
}else if (str1 == "Sum"){
Sum <- sum(vec1)
return(Sum)
}else if (str1 == "Observation"){
Count <- length(vec1)
return (Count)
}else {
cat("Error! You can choose from Average/Sum/Observation.")
}
}
cat("The total number of observations is", my_function(NewData$Taxon,"Observation"))
NewData %>% group_by(Nutrients) %>%
summarise(Average_TotalG = my_function(TotalG, "Average"))
write.csv(NewData, "Output/WrangledData.csv", row.names = FALSE)
Vector <- c(1,2,3,4,5,6,7,8,9,10)
my_function(Vector, "Average")
my_function(Vector, "Sum")
my_function(Vector, "Observation")
knitr::opts_chunk$set(echo = TRUE)
Vector <- c(1,2,3,4,5,6,7,8,9,10)
# here I used this vector to test my function.  The output should be average = 3, sum = 15, Observation = 5 for this test case x
my_function(Vector, "Average")
my_function(Vector, "Sum")
my_function(Vector, "Observation")
getwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("([A-Z]).* ", "\\1. \\2", MyData$organism))
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("([A-Z].*) (.*)", "\\1. \\2", MyData$organism))
library(dplyr)#package loading
MyData<-read.csv("./InputData/measurements.csv")#loading the data
str(MyData)#check the structure of the Data
head(MyData)
class(MyData)
dim(MyData)
tail(MyData)
summary(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("([A-Z].*) (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("([A-Z]).* ", "\\1., MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("[A-Z].* ", "\\1., MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("([A-Z]).* (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("([A-Z].*) (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("([A-Z]).* (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("(\\w)\\w+", "\\1", MyData$organism))
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("(\\w)\\w+", "\\1", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("(\\w)\\w+ (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("(\\w)\\w+ (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = gsub("(\\w)\\w+ (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = sub("(\\w)\\w+ (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = sub("(\\w)\\w+ (.*)", "\\1. \\2", MyData$organism))
head(MyData)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)#package loading
MyData<-read.csv("./InputData/measurements.csv")#loading the data
str(MyData)#check the structure of the Data
head(MyData)
class(MyData)
dim(MyData)
tail(MyData)
summary(MyData)
# Use a dplyr command and regular expression to add a new column called Sp
# Here I shortens the genus name in the Organism column to only the first letter and period
MyData <- mutate(MyData, Sp = sub("(\\w)\\w+ (.*)", "\\1. \\2", MyData$organism))
head(MyData)
# creating new data set using dplyr which replace organism  with Sp.
NewData <- MyData %>% select(Sp, Limb.width, Limb.length, Observer)
head(NewData)
# Output a new file named "MeasShort.csv"
write.csv(NewData, "Output/MeasShort.csv")
install.packages(MUSCLE)
install.packages("MUSCLE")
install.packages("BiocManager")
library(BiocManager)
install(c("sangerseqR","anotate"))
install(c("sangerseqR","anotate"))
install(c("sangerseqR"))
library(BiocManager)
install(c("sangerseqR","annotate"))
install(c("sangerseqR","annotate"),force = TRUE)
install.packages("MUSCLE")
install.packages("MUSCLE")
library(BiocManager)
/Library/Frameworks/R.framework/Versions/4.12/Resources/library
install.packages("dplyr")
install.packages("ggplot2")
install.packages("lmtest")
install.packages("ggfortify")
install.packages("MuMIn")
install.packages("MASS")
install.packages("ggsci")
install.packages("ggthemes")
install.packages("curl")
install.packages("MUSCLE")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("muscle")
install.packages("rentrez")
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(genbankr)
library(Biostrings)
library(annotate) # pairwise alignments
library(ape) # Multiple Alignments
library(muscle) # Align the sequences
library(rentrez)
library(ggtree)# phylogenetic tree
library(dplyr)
library(ggplot2)
library(reshape2)
# load the sequence : >human isolate, unknown sequence
UKSeq <-"ATGTCTGATAATGGACCCCAAAATCAGCGAAATGCACCCCGCATTACGTTTGGTGGACCCTCAGATTCAACTGGCAGTAACCAGAATGGAGAACGCAGTGGGGCGCGATCAAAACAACGTCGGCCCCAAGGTTTACCCAATAATACTGCGTCTTGGTTCACCGCTCTCACTCAACATGGCAAGGAAGACCTTAAATTCCCTCGAGGACAAGGCGTTCCAATTAACACCAATAGCAGTCCAGATGACCAAATTGGCTACTACCGAAGAGCTACCAGACGAATTCGTGGTGGTGACGGTAAAATGAAAGATCTCAGTCCAAGATGGTATTTCTACTACCTAGGAACTGGGCCAGAAGCTGGACTTCCCTATGGTGCTAACAAAGACGGCATCATATGGGTTGCAACTGAGGGAGCCTTGAATACACCAAAAGATCACATTGGCACCCGCAATCCTGCTAACAATGCTGCAATCGTGCTACAACTTCCTCAAGGAACAACATTGCCAAAAGGCTTCTACGCAGAAGGGAGCAGAGGCGGCAGTCAAGCCTCTTCTCGTTCCTCATCACGTAGTCGCAACAGTTCAAGAAATTCAACTCCAGGCAGCAGTAGGGGAACTTCTCCTGCTAGAATGGCTGGCAATGGCGGTGATGCTGCTCTTGCTTTGCTGCTGCTTGACAGATTGAACCAGCTTGAGAGCAAAATGTCTGGTAAAGGCCAACAACAACAAGGCCAAACTGTCACTAAGAAATCTGCTGCTGAGGCTTCTAAGAAGCCTCGGCAAAAACGTACTGCCACTAAAGCATACAATGTAACACAAGCTTTCGGCAGACGTGGTCCAGAACAAACCCAAGGAAATTTTGGGGACCAGGAACTAATCAGACAAGGAACTGATTACAAACATTGGCCGCAAATTGCACAATTTGCCCCCAGCGCTTCAGCGTTCTTCGGAATGTCGCGCATTGGCATGGAAGTCACACCTTCGGGAACGTGGTTGACCTACACAGGTGCCATCAAATTGGATGACAAAGATCCAAATTTCAAAGATCAAGTCATTTTGCTGAATAAGCATATTGACGCATACAAAACATTCCCACCAACAGAGCCTAAAAAGGACAAAAAGAAGAAGGCTGATGAAACTCAAGCCTTACCGCAGAGACAGAAGAAACAGCAAACTGTGACTCTTCTTCCTGCTGCAGATTTGGATGATTTCTCCAAACAATTGCAACAATCCATGAGCAGTGCTGACTCAACTCAGGCCTAA"
UKGbkBLAST<-blastSequences(paste(UKSeq),as = 'data.frame',
hitListSize = 20, timeout = 600)
library(BiocManager)
library(genbankr)
library(Biostrings)
library(annotate) # pairwise alignments
library(ape) # Multiple Alignments
library(muscle) # Align the sequences
library(rentrez)
library(ggtree)# phylogenetic tree
library(dplyr)
library(ggplot2)
library(reshape2)
library(BiocManager)
library(genbankr)
library(Biostrings)
library(annotate) # pairwise alignments
library(ape) # Multiple Alignments
library(muscle) # Align the sequences
library(rentrez)
library(ggtree)# phylogenetic tree
library(dplyr)
library(ggplot2)
library(reshape2)
# load the sequence : >human isolate, unknown sequence
UKSeq <-"ATGTCTGATAATGGACCCCAAAATCAGCGAAATGCACCCCGCATTACGTTTGGTGGACCCTCAGATTCAACTGGCAGTAACCAGAATGGAGAACGCAGTGGGGCGCGATCAAAACAACGTCGGCCCCAAGGTTTACCCAATAATACTGCGTCTTGGTTCACCGCTCTCACTCAACATGGCAAGGAAGACCTTAAATTCCCTCGAGGACAAGGCGTTCCAATTAACACCAATAGCAGTCCAGATGACCAAATTGGCTACTACCGAAGAGCTACCAGACGAATTCGTGGTGGTGACGGTAAAATGAAAGATCTCAGTCCAAGATGGTATTTCTACTACCTAGGAACTGGGCCAGAAGCTGGACTTCCCTATGGTGCTAACAAAGACGGCATCATATGGGTTGCAACTGAGGGAGCCTTGAATACACCAAAAGATCACATTGGCACCCGCAATCCTGCTAACAATGCTGCAATCGTGCTACAACTTCCTCAAGGAACAACATTGCCAAAAGGCTTCTACGCAGAAGGGAGCAGAGGCGGCAGTCAAGCCTCTTCTCGTTCCTCATCACGTAGTCGCAACAGTTCAAGAAATTCAACTCCAGGCAGCAGTAGGGGAACTTCTCCTGCTAGAATGGCTGGCAATGGCGGTGATGCTGCTCTTGCTTTGCTGCTGCTTGACAGATTGAACCAGCTTGAGAGCAAAATGTCTGGTAAAGGCCAACAACAACAAGGCCAAACTGTCACTAAGAAATCTGCTGCTGAGGCTTCTAAGAAGCCTCGGCAAAAACGTACTGCCACTAAAGCATACAATGTAACACAAGCTTTCGGCAGACGTGGTCCAGAACAAACCCAAGGAAATTTTGGGGACCAGGAACTAATCAGACAAGGAACTGATTACAAACATTGGCCGCAAATTGCACAATTTGCCCCCAGCGCTTCAGCGTTCTTCGGAATGTCGCGCATTGGCATGGAAGTCACACCTTCGGGAACGTGGTTGACCTACACAGGTGCCATCAAATTGGATGACAAAGATCCAAATTTCAAAGATCAAGTCATTTTGCTGAATAAGCATATTGACGCATACAAAACATTCCCACCAACAGAGCCTAAAAAGGACAAAAAGAAGAAGGCTGATGAAACTCAAGCCTTACCGCAGAGACAGAAGAAACAGCAAACTGTGACTCTTCTTCCTGCTGCAGATTTGGATGATTTCTCCAAACAATTGCAACAATCCATGAGCAGTGCTGACTCAACTCAGGCCTAA"
UKGbkBLAST<-blastSequences(paste(UKSeq),as = 'data.frame',
hitListSize = 20, timeout = 600)
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(genbankr)
library(Biostrings)
library(annotate) # pairwise alignments
library(ape) # Multiple Alignments
library(muscle) # Align the sequences
library(rentrez)
library(ggtree)# phylogenetic tree
library(dplyr)
library(ggplot2)
library(reshape2)
library(genbankr)
# load the sequence : >human isolate, unknown sequence
UKSeq <-"ATGTCTGATAATGGACCCCAAAATCAGCGAAATGCACCCCGCATTACGTTTGGTGGACCCTCAGATTCAACTGGCAGTAACCAGAATGGAGAACGCAGTGGGGCGCGATCAAAACAACGTCGGCCCCAAGGTTTACCCAATAATACTGCGTCTTGGTTCACCGCTCTCACTCAACATGGCAAGGAAGACCTTAAATTCCCTCGAGGACAAGGCGTTCCAATTAACACCAATAGCAGTCCAGATGACCAAATTGGCTACTACCGAAGAGCTACCAGACGAATTCGTGGTGGTGACGGTAAAATGAAAGATCTCAGTCCAAGATGGTATTTCTACTACCTAGGAACTGGGCCAGAAGCTGGACTTCCCTATGGTGCTAACAAAGACGGCATCATATGGGTTGCAACTGAGGGAGCCTTGAATACACCAAAAGATCACATTGGCACCCGCAATCCTGCTAACAATGCTGCAATCGTGCTACAACTTCCTCAAGGAACAACATTGCCAAAAGGCTTCTACGCAGAAGGGAGCAGAGGCGGCAGTCAAGCCTCTTCTCGTTCCTCATCACGTAGTCGCAACAGTTCAAGAAATTCAACTCCAGGCAGCAGTAGGGGAACTTCTCCTGCTAGAATGGCTGGCAATGGCGGTGATGCTGCTCTTGCTTTGCTGCTGCTTGACAGATTGAACCAGCTTGAGAGCAAAATGTCTGGTAAAGGCCAACAACAACAAGGCCAAACTGTCACTAAGAAATCTGCTGCTGAGGCTTCTAAGAAGCCTCGGCAAAAACGTACTGCCACTAAAGCATACAATGTAACACAAGCTTTCGGCAGACGTGGTCCAGAACAAACCCAAGGAAATTTTGGGGACCAGGAACTAATCAGACAAGGAACTGATTACAAACATTGGCCGCAAATTGCACAATTTGCCCCCAGCGCTTCAGCGTTCTTCGGAATGTCGCGCATTGGCATGGAAGTCACACCTTCGGGAACGTGGTTGACCTACACAGGTGCCATCAAATTGGATGACAAAGATCCAAATTTCAAAGATCAAGTCATTTTGCTGAATAAGCATATTGACGCATACAAAACATTCCCACCAACAGAGCCTAAAAAGGACAAAAAGAAGAAGGCTGATGAAACTCAAGCCTTACCGCAGAGACAGAAGAAACAGCAAACTGTGACTCTTCTTCCTGCTGCAGATTTGGATGATTTCTCCAAACAATTGCAACAATCCATGAGCAGTGCTGACTCAACTCAGGCCTAA"
UKGbkBLAST<-blastSequences(paste(UKSeq),as = 'data.frame',
hitListSize = 20, timeout = 600)
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(genbankr)
library(Biostrings)
library(annotate) # pairwise alignments
library(ape) # Multiple Alignments
library(muscle) # Align the sequences
library(rentrez)
library(ggtree)# phylogenetic tree
library(dplyr)
library(ggplot2)
library(reshape2)
# load the sequence : >human isolate, unknown sequence
UKSeq <-"ATGTCTGATAATGGACCCCAAAATCAGCGAAATGCACCCCGCATTACGTTTGGTGGACCCTCAGATTCAACTGGCAGTAACCAGAATGGAGAACGCAGTGGGGCGCGATCAAAACAACGTCGGCCCCAAGGTTTACCCAATAATACTGCGTCTTGGTTCACCGCTCTCACTCAACATGGCAAGGAAGACCTTAAATTCCCTCGAGGACAAGGCGTTCCAATTAACACCAATAGCAGTCCAGATGACCAAATTGGCTACTACCGAAGAGCTACCAGACGAATTCGTGGTGGTGACGGTAAAATGAAAGATCTCAGTCCAAGATGGTATTTCTACTACCTAGGAACTGGGCCAGAAGCTGGACTTCCCTATGGTGCTAACAAAGACGGCATCATATGGGTTGCAACTGAGGGAGCCTTGAATACACCAAAAGATCACATTGGCACCCGCAATCCTGCTAACAATGCTGCAATCGTGCTACAACTTCCTCAAGGAACAACATTGCCAAAAGGCTTCTACGCAGAAGGGAGCAGAGGCGGCAGTCAAGCCTCTTCTCGTTCCTCATCACGTAGTCGCAACAGTTCAAGAAATTCAACTCCAGGCAGCAGTAGGGGAACTTCTCCTGCTAGAATGGCTGGCAATGGCGGTGATGCTGCTCTTGCTTTGCTGCTGCTTGACAGATTGAACCAGCTTGAGAGCAAAATGTCTGGTAAAGGCCAACAACAACAAGGCCAAACTGTCACTAAGAAATCTGCTGCTGAGGCTTCTAAGAAGCCTCGGCAAAAACGTACTGCCACTAAAGCATACAATGTAACACAAGCTTTCGGCAGACGTGGTCCAGAACAAACCCAAGGAAATTTTGGGGACCAGGAACTAATCAGACAAGGAACTGATTACAAACATTGGCCGCAAATTGCACAATTTGCCCCCAGCGCTTCAGCGTTCTTCGGAATGTCGCGCATTGGCATGGAAGTCACACCTTCGGGAACGTGGTTGACCTACACAGGTGCCATCAAATTGGATGACAAAGATCCAAATTTCAAAGATCAAGTCATTTTGCTGAATAAGCATATTGACGCATACAAAACATTCCCACCAACAGAGCCTAAAAAGGACAAAAAGAAGAAGGCTGATGAAACTCAAGCCTTACCGCAGAGACAGAAGAAACAGCAAACTGTGACTCTTCTTCCTGCTGCAGATTTGGATGATTTCTCCAAACAATTGCAACAATCCATGAGCAGTGCTGACTCAACTCAGGCCTAA"
UKGbkBLAST<-blastSequences(paste(UKSeq),as = 'data.frame',
hitListSize = 20, timeout = 600)
# Make a simple vector of accession numbers from the BLAST results above and make them into a simple data frame object with two columns
UKHitsDF<-data.frame(ID=UKGbkBLAST$Hit_accession,Seq=UKGbkBLAST$Hsp_hseq,
stringsAsFactors = FALSE)
head(UKHitsDF)
## check the length of each sequence
UKGbkBLAST$Hit_len
#check the species of each sequence with their hit accession from Genebank.
UKHitSeqs<-read.GenBank(UKGbkBLAST$Hit_accession)
attr(UKHitSeqs,"species")
# Conduct the DNA mutiple Alignment
CVHitsDNAstring <- UKHitsDF$Seq %>% # Start with the sequences
as.character %>% # Convert to strings
lapply(.,paste0,collapse="") %>% # Collapse each sequence to a single string
unlist %>% # Flatten list to a vector
DNAStringSet # Convert vector to DNAStringSet object
names(CVHitsDNAstring)<-paste(1:nrow(UKHitsDF),UKHitsDF$ID,sep="_") #Give each sequence a unique names
CVAlign<-muscle::muscle(stringset=CVHitsDNAstring, quiet=T)
CVAlign
# According to the Aligment graph, there is no large gaps exist. Here check the sequence again to make sure there is no big gaps.
SeqLen<-as.numeric(lapply(CVHitsDNAstring,length))
qplot(SeqLen)+theme_bw()
# Convert the DNAMultipleAlignment object into DNAbin
CVAlign <- as.DNAbin(CVAlign)
CVDM<-dist.dna(CVAlign, model="K80")
CVDMmat<-as.matrix(CVDM)
PDat<-melt(CVDMmat)
ggplot(data = PDat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+scale_fill_gradientn(colours=c("white","blue","green","red"))+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
CVTree<-nj(CVDM)
ggtree(CVTree)
#remove the branch length info to focus on the relationships
ggtree(CVTree,branch.length='none')+ geom_tiplab()
pdf(width=8,height=4)
ggtree(CVTree,layout="radial") + geom_tiplab()
dev.off()
pdf(width=8,height=4)
ggtree(CVTree,layout="radial") + geom_tiplab()
dev.off()
#remove the branch length info to focus on the relationships
ggtree(CVTree,branch.length='none')+ geom_tiplab()
pdf(width=8,height=4)
ggtree(CVTree,layout="radial") + geom_tiplab()
dev.off()
# save the tree
write.tree(CVTree,"A6_Tianyi_Zuo_Cov2_Virus_tree.tre")
pdf(width=10,height=4)
ggtree(CVTree,branch.length='none') + geom_tiplab()
dev.off()
pdf(width=10,height=4)
ggtree(CVTree,branch.length='none'，layout="circular") + geom_tiplab()
pdf(width=10,height=4)
ggtree(CVTree,branch.length='none',layout="circular") + geom_tiplab()
dev.off()
ggtree(CVTree,branch.length = "none",layout="circular") + geom_tiplab()
pdf(width=8,height=4)
ggtree(CVTree,branch.length='none',layout="circular") + geom_tiplab()
dev.off()
# Because having trouble reading the labels, here exporting to a pdf file
pdf("A6_Tianyi_Zuo_Cov2_Virus_tree",width=8,height=4)
ggtree(CVTree,branch.length='none',layout="circular") + geom_tiplab()
dev.off()
# Because having trouble reading the labels, here exporting to a pdf file
pdf("A6_Tianyi_Zuo_Cov2_Virus_tree.pdf",width=8,height=4)
ggtree(CVTree,branch.length='none',layout="circular") + geom_tiplab()
dev.off()
